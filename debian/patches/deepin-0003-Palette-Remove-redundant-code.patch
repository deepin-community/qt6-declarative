From 874654f3537592feb048d821c4d14c90184dd700 Mon Sep 17 00:00:00 2001
From: Oliver Eftevaag <oliver.eftevaag@qt.io>
Date: Tue, 10 Oct 2023 13:28:39 +0200
Subject: [PATCH] Palette: Remove redundant code

In 4e7a83156d47683f777e92d2790cb617f0bb09d5 we duplicated the
implementation for the bitPosition() function in qpalette.cpp.

The intention was to expose the function in a private header, and
eventually replace the redundant functions in qpalettecolorprovider,
with the ones in QtGui.

Now that qpalette_p.h exist, lets actually use it.

Change-Id: Id7528b7f1c3f5481e0410688ef8e018afb951410
Reviewed-by: Mitch Curtis <mitch.curtis@qt.io>
---
 .../items/qquickpalettecolorprovider.cpp      | 32 +++----------------
 1 file changed, 4 insertions(+), 28 deletions(-)

diff --git a/src/quick/items/qquickpalettecolorprovider.cpp b/src/quick/items/qquickpalettecolorprovider.cpp
index 1354a20749b..af6f0ef7a5d 100644
--- a/src/quick/items/qquickpalettecolorprovider.cpp
+++ b/src/quick/items/qquickpalettecolorprovider.cpp
@@ -3,6 +3,7 @@
 #include "qquickpalettecolorprovider_p.h"
 
 #include <QtQuick/private/qquickabstractpaletteprovider_p.h>
+#include <QtGui/private/qpalette_p.h>
 
 QT_BEGIN_NAMESPACE
 
@@ -16,31 +17,6 @@ static QPalette::ColorGroup adjustCg(QPalette::ColorGroup group)
     return group == QPalette::All ? QPalette::Active : group;
 }
 
-// Begin copy from qpalette.cpp
-static constexpr QPalette::ResolveMask colorRoleOffset(QPalette::ColorGroup colorGroup)
-{
-    Q_ASSERT(colorGroup < QPalette::NColorGroups);
-    // Exclude NoRole; that bit is used for Accent
-    return (qToUnderlying(QPalette::NColorRoles) - 1) * qToUnderlying(colorGroup);
-}
-
-// TODO: Share the function by private interface in qtbase
-static constexpr QPalette::ResolveMask bitPosition(QPalette::ColorGroup colorGroup,
-                                                   QPalette::ColorRole colorRole)
-{
-    // Map Accent into NoRole for resolving purposes
-    if (colorRole == QPalette::Accent)
-        colorRole = QPalette::NoRole;
-
-    return colorRole + colorRoleOffset(colorGroup);
-}
-
-static_assert(bitPosition(QPalette::ColorGroup(QPalette::NColorGroups - 1),
-                          QPalette::ColorRole(QPalette::NColorRoles - 1))
-                  < sizeof(QPalette::ResolveMask) * CHAR_BIT,
-              "The resolve mask type is not wide enough to fit the entire bit mask.");
-// End copy from qpalette.cpp
-
 class DefaultPalettesProvider : public QQuickAbstractPaletteProvider
 {
 public:
@@ -79,9 +55,9 @@ bool QQuickPaletteColorProvider::resetColor(QPalette::ColorGroup group, QPalette
 
     if (group == QPalette::All) {
         for (int g = QPalette::Active; g < QPalette::NColorGroups; ++g)
-            unsetResolveMask |= (QPalette::ResolveMask(1) << bitPosition(QPalette::ColorGroup(g), role));
+            unsetResolveMask |= (QPalette::ResolveMask(1) << QPalettePrivate::bitPosition(QPalette::ColorGroup(g), role));
     } else {
-        unsetResolveMask = (QPalette::ResolveMask(1) << bitPosition(group, role));
+        unsetResolveMask = (QPalette::ResolveMask(1) << QPalettePrivate::bitPosition(group, role));
     }
 
     m_requestedPalette->setResolveMask(m_requestedPalette->resolveMask() & ~unsetResolveMask);
@@ -100,7 +76,7 @@ bool QQuickPaletteColorProvider::resetColor(QPalette::ColorGroup group)
         QPalette::ResolveMask mask = 0;
         for (int roleIndex = QPalette::WindowText; roleIndex < QPalette::NColorRoles; ++roleIndex) {
             const auto cr = QPalette::ColorRole(roleIndex);
-            mask |= (QPalette::ResolveMask(1) << bitPosition(group, cr));
+            mask |= (QPalette::ResolveMask(1) << QPalettePrivate::bitPosition(group, cr));
         }
         return mask;
     };
